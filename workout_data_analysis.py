# -*- coding: utf-8 -*-
"""Workout Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xan3tyDrMQ1TKTtRysGIWeV67IZf5vIm

# **Setup**
"""

!pip install gspread gspread_dataframe

# Authenticate with your Google account
from google.colab import auth
auth.authenticate_user()

import gspread
from gspread_dataframe import get_as_dataframe
from google.auth import default
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import spearmanr

# Authorize access to Google Sheets
creds, _ = default()
gc = gspread.authorize(creds)

"""# **Set Up Data**"""

# Open the spreadsheet by its name
sh = gc.open("Lifting Progress")

# Select the sheet (tab) called "Master Data Base"
worksheet = sh.worksheet("Matser Data Base")

# Convert the sheet into a pandas DataFrame
df = get_as_dataframe(worksheet, evaluate_formulas=True, dtype=str)

# Drop completely empty rows/columns (common in Sheets)
df = df.dropna(how="all").reset_index(drop=True)

# Convert columns to proper dtypes
df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
df["Sets"] = pd.to_numeric(df["Sets"], errors="coerce")
df["Weight"] = pd.to_numeric(df["Weight"], errors="coerce")
df["Reps"] = pd.to_numeric(df["Reps"], errors="coerce")
df["Days"] = (df["Date"] - df["Date"].min()).dt.days

#Add 1RM Column using brzycki formula
df["1RM"] = df["Weight"] / (1.0278 - (0.0278 * df["Reps"]))

#Add set volume
df["Set Volume"] = df["Weight"] * df["Reps"]

#Add Total Volume
for index in range(2, len(df), 4):
  df.loc[index, "Total Volume"] = df.loc[index - 2, "Set Volume"] + df.loc[index - 1, "Set Volume"] + df.loc[index, "Set Volume"] + df.loc[index + 1, "Set Volume"]

#Display preview
pd.set_option('display.width', 200)
pd.set_option('display.max_columns', None)
print(df.head(8))

"""# **Plot Data**"""

def plotOneRepMax(Exercise):
    #Function to make line plot of One Rep Max vs Time for an exercise

    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]

    plt.plot(exerciseDataThree["Date"], exerciseDataThree["1RM"])
    plt.xlabel("Date")
    plt.xticks(rotation=45)  # or 90 for vertical
    plt.ylabel("1RM")
    plt.title(Exercise)
    plt.show()
    return

def plotVol(Exercise):
    #Function to make line plot of One Rep Max vs Time for an exercise

    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]

    plt.plot(exerciseDataThree["Date"], exerciseDataThree["Total Volume"], color = 'red')
    plt.xlabel("Date")
    plt.xticks(rotation=45)  # or 90 for vertical
    plt.ylabel("Volume")
    plt.title(Exercise)
    plt.show()
    return

plotOneRepMax("Seated Row")
plotVol("Seated Row")

"""# **Show Stats**"""

def findCorrelation(Exercise):
    #Function that finds spearman correlation coefficent between 1RM and Time

    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]

    oneRepMax = exerciseDataThree["Weight"] / (1.0278 - ( 0.0278 * exerciseDataThree["Reps"]))

    corr, _ = spearmanr(exerciseDataThree["Days"], oneRepMax)
    return corr

def findPValue(Exercise):
    #Function that finds spearman correlation coefficent between 1RM and Time

    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]

    oneRepMax = exerciseDataThree["Weight"] / (1.0278 - (0.0278 * exerciseDataThree["Reps"]))

    _, pValue = spearmanr(exerciseDataThree["Days"], oneRepMax)
    return pValue


exerciseList = df["Exercise"].unique().tolist()


def avgPercentIncrease(Exercise):
    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]
    exerciseDataThree = exerciseDataThree.reset_index(drop=True)

    totalPercentIncrease = 0

    for index in range(1, len(exerciseDataThree)):
      percentInc = exerciseDataThree.loc[index, "1RM"]/exerciseDataThree.loc[index-1, "1RM"] * 100 - 100
      totalPercentIncrease += percentInc

    avgPercentInc = totalPercentIncrease / (len(exerciseDataThree) - 1)
    return avgPercentInc

def diff1RM(Exercise):
    exerciseData = df[df["Exercise"] == Exercise]
    exerciseDataThree = exerciseData[exerciseData["Sets"] == 3]
    exerciseDataThree = exerciseDataThree.reset_index(drop=True)

    min_index = exerciseDataThree["Days"].idxmin()
    max_index = exerciseDataThree["Days"].idxmax()
    min_1RM = exerciseDataThree.loc[min_index, "1RM"]
    max_1RM = exerciseDataThree.loc[max_index, "1RM"]

    return max_1RM - min_1RM




# Make new data frame with spearman correlation and P Values
corrValues = {
    'Exercise': exerciseList,
    'Corr': [findCorrelation(exercise) for exercise in exerciseList],
    'pValue': [findPValue(exercise) for exercise in exerciseList],
    'Avg % Inc': [avgPercentIncrease(exercise) for exercise in exerciseList],
    '1RM diff': [diff1RM(exercise) for exercise in exerciseList]
}

exerciseStats = pd.DataFrame(corrValues)

exerciseStats_sorted = exerciseStats.sort_values(by = 'Corr', ascending = True)
exerciseStats_sorted = exerciseStats_sorted.reset_index(drop=True)

print(exerciseStats_sorted)
